/**
 * Slamby API
 * Slamby API
 *
 * OpenAPI spec version: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class PrcServiceApi {
    protected basePath = 'https://localhost/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * 
     * @param id 
     * @param prcActivateSettings 
     */
    public prcActivateService (id: string, prcActivateSettings?: models.IPrcActivateSettings, extraHttpRequestParams?: any ) : Observable<models.IProcess> {
        const path = this.basePath + '/api/Services/Prc/{id}/Activate'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcActivateService.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(prcActivateSettings);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     */
    public prcDeactivateService (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/Services/Prc/{id}/Deactivate'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcDeactivateService.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param settings 
     */
    public prcExportDictionaries (id: string, settings?: models.IExportDictionariesSettings, extraHttpRequestParams?: any ) : Observable<models.IProcess> {
        const path = this.basePath + '/api/Services/Prc/{id}/ExportDictionaries'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcExportDictionaries.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(settings);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     */
    public prcGetService (id: string, extraHttpRequestParams?: any ) : Observable<models.IPrcService> {
        const path = this.basePath + '/api/Services/Prc/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcGetService.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     */
    public prcIndexPartialService (id: string, extraHttpRequestParams?: any ) : Observable<models.IProcess> {
        const path = this.basePath + '/api/Services/Prc/{id}/IndexPartial'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcIndexPartialService.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param prcIndexSettings 
     */
    public prcIndexService (id: string, prcIndexSettings?: models.IPrcIndexSettings, extraHttpRequestParams?: any ) : Observable<models.IProcess> {
        const path = this.basePath + '/api/Services/Prc/{id}/Index'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcIndexService.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(prcIndexSettings);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param request 
     * @param isStrict 
     */
    public prcKeywordsService (id: string, request?: models.IPrcKeywordsRequest, isStrict?: boolean, extraHttpRequestParams?: any ) : Observable<Array<models.IPrcKeywordsResult>> {
        const path = this.basePath + '/api/Services/Prc/{id}/Keywords'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcKeywordsService.');
        }
        if (isStrict !== undefined) {
            queryParameters.set('isStrict', String(isStrict));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(request);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param prcPrepareSettings 
     */
    public prcPrepareService (id: string, prcPrepareSettings?: models.IPrcPrepareSettings, extraHttpRequestParams?: any ) : Observable<models.IProcess> {
        const path = this.basePath + '/api/Services/Prc/{id}/Prepare'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcPrepareService.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(prcPrepareSettings);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param request 
     */
    public prcRecommendByIdService (id: string, request?: models.IPrcRecommendationByIdRequest, extraHttpRequestParams?: any ) : Observable<Array<models.IPrcRecommendationResult>> {
        const path = this.basePath + '/api/Services/Prc/{id}/RecommendById'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcRecommendByIdService.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(request);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param request 
     */
    public prcRecommendService (id: string, request?: models.IPrcRecommendationRequest, extraHttpRequestParams?: any ) : Observable<Array<models.IPrcRecommendationResult>> {
        const path = this.basePath + '/api/Services/Prc/{id}/Recommend'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcRecommendService.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(request);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.text() ? response.json() : undefined;
                }
            });
    }

}
